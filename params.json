{"name":"towerdefense-scala","tagline":"","body":"[![Build Status](https://travis-ci.org/nisshiee/towerdefense-scala.png?branch=master)](https://travis-ci.org/nisshiee/towerdefense-scala)\r\n\r\n\r\nhow to use\r\n----------------------------------------\r\n\r\n### sbt dependency\r\n\r\n```\r\nlibraryDependencies += \"org.nisshiee\" %% \"towerdefense-scala\" % \"1.0.0\"\r\n```\r\n\r\n### Playerの実装\r\n\r\norg.nisshiee.towerdefensescala.Playerを継承することで、\r\nSampleと同様にJavaからオブジェクトを生成して動作させることができるPlayerを実装できます。\r\n\r\n例：\r\n\r\n```scala\r\nimport org.nisshiee.towerdefensescala._\r\n\r\nclass MyPlayer(name: String) extends Player[Int](name) {\r\n\r\n  def init: Int = 0\r\n\r\n  def action: ((Snapshot, Int)) => ((Seq[Command], Int)) = {\r\n    case (snapshot, turn) =>\r\n      List(Command(Point(turn, 1), WeakTower)) -> (turn + 1)\r\n  }\r\n}\r\n```\r\n\r\nデフォルトコンストラクタの引数 `name: String` は、\r\nJavaからの呼び出しに合わせるため、おそらく必須です。\r\n\r\nPlayer abstract classは、型パラメータAを持っています。\r\nAは、actionの呼び出しを超えて引き継げる\"状態\"の型です。\r\nこの例ではIntを指定していますが、独自の型を指定できます。\r\n\r\ninitには、初回のaction呼び出し時に渡される\"状態\"を指定します。\r\n\r\nactionが、AI部分です。\r\n「ゲームの状態と、Playerの状態を受け取り、Commandと次のPlayerの状態を返す」関数を実装します。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}